{"title":"AlphaGo论文读后感及其应用","slug":"alpha-go","date":"2020-11-20T09:40:00.000Z","updated":"2020-11-21T10:02:41.769Z","comments":true,"path":"api/articles/alpha-go.json","excerpt":null,"covers":["https://qiniu.madeai.cn/blogimg/image-20201120172338713.png?imgslim","https://qiniu.madeai.cn/blogimg/image-20201120172538668.png?imgslim","https://qiniu.madeai.cn/blogimg/clip_image001.png?imgslim","https://qiniu.madeai.cn/blogimg/image-20201121180223198.png?imgslim"],"content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"论文摘要\"><a href=\"#论文摘要\" class=\"headerlink\" title=\"论文摘要\"></a>论文摘要</h2><ol>\n<li><p>这个方法使用估值神经网络来评估棋局，以及使用策略网络来选择如何落子。这些深度神经网络被一种新的组合来训练：使用了人类专业比赛数据的监督学习，以及自我对弈的强化学习。</p>\n</li>\n<li><p>在状态 s 时对搜索树进行剪枝，然后用一个近似估值函数v(s)≈v∗(s)取代状态 s 下面的子树，这个近似估值函数预测状态 s 之后的对弈结果。</p>\n</li>\n<li><p>搜索的宽度可以通过来自策略p(a|s)的样品动作来降低，这个策略是一个在位置 s 的可能下棋走子 a 概率分布。</p>\n</li>\n<li><p>蒙特卡洛树搜索使用蒙特卡洛走子方法，评估搜索树中每一个状态的估值。随着执行越来越多的模拟，这个搜索树成长越来越大，而且相关估值愈发精确。</p>\n</li>\n<li><p>然而，先前的工作已经受到了基于输入的线性组合的肤浅的策略或估值函数的限制。</p>\n</li>\n<li><p>它们使用很多层的神经网络，每一个安排在重叠的瓦片，用来构建愈发抽象的，局部代表的图片，我们为围棋程序部署了类似的体系架构。我们给程序传入了一个 19*19 大小棋局的图片，然后使用卷积神经网络来构建一个位置的代表。我们使用这些神经网络来降低搜索树的有效的深度和广度：通过估值网络来评估棋局，和使用策略网络来博弈取样。</p>\n</li>\n<li><p>我们的AlphaGo程序有效地把策略网络、估值网络，和蒙特卡洛搜索树结合在一起。</p>\n</li>\n<li><p>如果赢棋，结果等于 +1，如果输棋，结果等于 -1。然后权重在每一个步骤 t 更新：朝向最大化预期结果的方向随机梯度递增。</p>\n</li>\n<li><p>我们想出了新的自我对弈的数据集合，包含了三千万个不同的棋局，每一个都是从不同盘博弈中采样。每一盘博弈都是在 RL 策略网络和自己之间对弈，直到博弈本身结束。</p>\n</li>\n<li><p>AlphaGo 在把策略网络、估值网络和 MCTS 算法结合，MCTS 通过预测搜索选择下棋动作。</p>\n</li>\n<li><p>基于高性能蒙特卡洛树搜索算法的、蒙特卡洛树搜索</p>\n</li>\n<li><p>基于一个深度神经网络和树搜索的结合开发了一个围棋程序。我们首次，对围棋开发了一个有效地下棋走子选择器和棋局评估函数，它是基于被一个创新型地监督学习和强化学习地组合训练的深度网络。我们引入了新的搜索算法，它成功的把神经网络评估和蒙特卡洛滚动走子结合在一起。我们的程序 AlphaGo 把这些组成部分按照比例集成在一起，成为了一个高性能的树搜索引擎。</p>\n</li>\n<li><p>一个有挑战性的决策任务；一个难以对付的解空间；和一个非常复杂的最优解，以至于它看上去不可能世界使用策略或者估值函数逼近。</p>\n</li>\n<li><p>通过把树搜索和策略估值网络结合在一起，AlphaGo最终达到了围棋职业选手的水平。</p>\n</li>\n</ol>\n<h2 id=\"AlphaGo应用——五子棋\"><a href=\"#AlphaGo应用——五子棋\" class=\"headerlink\" title=\"AlphaGo应用——五子棋\"></a>AlphaGo应用——五子棋</h2><h3 id=\"评估函数\"><a href=\"#评估函数\" class=\"headerlink\" title=\"评估函数\"></a>评估函数</h3><ol>\n<li><p><strong>是对一个可走的空位子进行打分</strong>，如果ai白子落在这个空位置的分数越高，说明这个位置就越好，每次ai走棋就找到一个最好的空位置就行了。</p>\n</li>\n<li><p><strong>是对现在的棋盘局面进行打分</strong>。 ai白子首先找所有可以走的空位置，模拟走了这个位置以后，用f函数进行局面评分，如果走了这样的一个空位置的得分越高，说明这个位置就越好，每次ai走棋就找这样一个分数最高的位置。</p>\n</li>\n</ol>\n<p>如果你只是想实现一个只看一步的ai，那么你可以用第一个函数也可以用第二个函数。但是如果你想要实现基于博弈树的极大极小搜索和α-β剪枝算法的”聪明”ai，就只能用第二个函数，因为<strong>博弈树必须要对局面打分，而不是对位置打分</strong>。</p>\n<h3 id=\"棋型权重设计\"><a href=\"#棋型权重设计\" class=\"headerlink\" title=\"棋型权重设计\"></a>棋型权重设计</h3><table>\n<thead>\n<tr>\n<th>棋型代号</th>\n<th>棋型说明</th>\n<th>权重</th>\n<th>棋型代号</th>\n<th>棋型说明</th>\n<th><strong>权重</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WIN</td>\n<td>白赢</td>\n<td>1000000</td>\n<td>LOSE</td>\n<td>黑赢</td>\n<td>-10000000</td>\n</tr>\n<tr>\n<td>FLEX4</td>\n<td>白活4</td>\n<td>50000</td>\n<td>flex4</td>\n<td>黑活4</td>\n<td>-100000</td>\n</tr>\n<tr>\n<td>BLOCK4</td>\n<td>白冲4</td>\n<td>400</td>\n<td>block4</td>\n<td>黑冲4</td>\n<td>-100000</td>\n</tr>\n<tr>\n<td>FLEX3</td>\n<td>白活3</td>\n<td>400</td>\n<td>flex3</td>\n<td>黑活3</td>\n<td>-8000</td>\n</tr>\n<tr>\n<td>BLOCK3</td>\n<td>白眠3</td>\n<td>20</td>\n<td>block3</td>\n<td>黑眠3</td>\n<td>-50</td>\n</tr>\n<tr>\n<td>FLEX2</td>\n<td>白活2</td>\n<td>20</td>\n<td>flex2</td>\n<td>黑活2</td>\n<td>-50</td>\n</tr>\n<tr>\n<td>BLOCK2</td>\n<td>白眠2</td>\n<td>1</td>\n<td>block2</td>\n<td>黑眠2</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>FLEX1</td>\n<td>白活1</td>\n<td>1</td>\n<td>flex1</td>\n<td>黑活1</td>\n<td>-3</td>\n</tr>\n</tbody></table>\n<p>权重设计表格</p>\n<h3 id=\"极大极小搜索\"><a href=\"#极大极小搜索\" class=\"headerlink\" title=\"极大极小搜索\"></a>极大极小搜索</h3><p>在博弈树中，当ai走棋时选择对自己最有利的位置节点走，而当玩家走棋时，是ai模拟玩家选择对玩家最有利的位置节点走。由于评估函数F对局势的评分是对于ai白子来说的，所以ai走棋时选择F最大的节点，模拟玩家走棋时选择F最小的节点（F越小，对ai越不利，对玩家越有利，ai模拟玩家时是认为玩家是”聪明”的），这就是称为极大极小搜索的缘故。</p>\n<h3 id=\"α-β剪枝算法\"><a href=\"#α-β剪枝算法\" class=\"headerlink\" title=\"α-β剪枝算法\"></a>α-β剪枝算法</h3><p>α-β剪枝算法中每一个节点对应有一个α和一个β，α表示目前该节点的最好下界，β表示目前该节点的最好上界。在最开始时，α为负无穷，β为正无穷。然后进行搜索，max层节点每搜索它的一个子节点，就要更新自己的α（下界），而min层节点每搜索它的一个子节点，就要更新自己的β（上界）。如果更新之后发现α&gt;=β了，说明后面的子节点已经不需要进行搜索了，直接break剪枝掉。这就是α-β剪枝算法的全部含义。</p>\n<h3 id=\"局部搜索和静态评价启发\"><a href=\"#局部搜索和静态评价启发\" class=\"headerlink\" title=\"局部搜索和静态评价启发\"></a>局部搜索和静态评价启发</h3><p>a)  局部搜索是说，只考虑那些能和棋子产生关系的空位置，而不用考虑所有空位置，这样能极大减小b的值。</p>\n<p>b)  静态评价启发是对于α-β剪枝算法而言的，意思是说，如果越早搜索到较优走法，剪枝就会越早发生。如果对可走节点的评估分数进行简单排序，就可以提高剪枝速度。</p>\n<h2 id=\"Bingo-AI的实现\"><a href=\"#Bingo-AI的实现\" class=\"headerlink\" title=\"Bingo AI的实现\"></a>Bingo AI的实现</h2><h3 id=\"游戏规则\"><a href=\"#游戏规则\" class=\"headerlink\" title=\"游戏规则\"></a>游戏规则</h3><p>游戏双方分别在3x3的方格纸上依次画x或o，直到一方的x或o连成一条直线（3个子）获胜。</p>\n<p><img src=\"https://qiniu.madeai.cn/blogimg/image-20201120172338713.png?imgslim\" alt=\"image-20201120172338713\"></p>\n<p>平局示意图</p>\n<h3 id=\"系统架构设计\"><a href=\"#系统架构设计\" class=\"headerlink\" title=\"系统架构设计\"></a>系统架构设计</h3><h4 id=\"Pygame\"><a href=\"#Pygame\" class=\"headerlink\" title=\"Pygame\"></a>Pygame</h4><blockquote>\n<p>Pygame is a set of Python modules designed for writing video games. Pygame adds functionality on top of the excellent SDL library. This allows you to create fully featured games and multimedia programs in the python language.</p>\n</blockquote>\n<h4 id=\"TensorFlow\"><a href=\"#TensorFlow\" class=\"headerlink\" title=\"TensorFlow\"></a>TensorFlow</h4><blockquote>\n<p>TensorFlow 是一个端到端开源机器学习平台。它拥有一个全面而灵活的生态系统，其中包含各种工具、库和社区资源，可助力研究人员推动先进机器学习技术的发展，并使开发者能够轻松地构建和部署由机器学习提供支持的应用。</p>\n</blockquote>\n<h3 id=\"编码阶段\"><a href=\"#编码阶段\" class=\"headerlink\" title=\"编码阶段\"></a>编码阶段</h3><p><img src=\"https://qiniu.madeai.cn/blogimg/image-20201120172538668.png?imgslim\" alt=\"image-20201120172538668\"></p>\n<p>界面设计图示</p>\n<p>在规则设定上，默认玩家先手AI后手。玩家用”X”表示，AI用”O”表示。</p>\n<p><img src=\"https://qiniu.madeai.cn/blogimg/clip_image001.png?imgslim\" alt=\"img\"></p>\n<p>博弈树的设计图示</p>\n<p>在上图中，树的深度是9，因为最坏情况下要走9步。每个节点记录落子的方位和权值信息。由于是玩家先手，所以第一层的节点存储玩家的信息，由于AI的胜率要尽可能大，所以估值函数返回的值当中一定要是最小的才行；下一层是AI执棋，所以估值函数的返回值要选择大的。</p>\n<p><img src=\"https://qiniu.madeai.cn/blogimg/image-20201121180223198.png?imgslim\" alt=\"image-20201121180223198\"></p>\n<p>AI必输局面</p>\n<p>由以上局面和一般经验总结，占据最中间的位置赢面最大，所以可以设置在arr[1][1]时的初始权重最大；其次是边角位置，由于可以分别向两个方向落3个子，所以它的初始权重次之。边缘的位置不好判断，要结合具体的局面来设置权重。我们把所有的局面输入神经网络，通过神经网络的BP机制来动态调整权重。</p>\n<p><strong>AI自学习：</strong></p>\n<div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"video\":{\"url\":\"http://pan.madeai.cn/?/video/p1.mp4\",\"pic\":\"/assets/img/dplayer-cover.svg\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n\n<p>监督学习演示视频</p>\n<p>如以上视频所示，一开始我们和AI下棋，AI通过随机函数来随机生成落子方位。随着棋局的增加，AI将局面数组、赢方、权重的信息记录进一个json文件，根据玩家赢得次数来设计每个局面的权重。然后进入神经网络学习，通过BP来调整权重，通过α-β剪枝来降低搜索时间复杂度。随着我们和AI对弈次数的增加，AI会变得越来越有赢面，最后不再使用随机函数。</p>\n<p><strong>参数设计：</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Arr</td>\n<td>Int[][]</td>\n<td>游戏地图，0是空，1是玩家子，2是AI子</td>\n</tr>\n<tr>\n<td>Hold</td>\n<td>Int</td>\n<td>谁落子，1是玩家落子，2是AI落子</td>\n</tr>\n</tbody></table>\n<p><strong>函数设计：</strong></p>\n<table>\n<thead>\n<tr>\n<th>函数名称</th>\n<th>参数</th>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>judge_full</td>\n<td>Arr:棋局地图</td>\n<td>Bool:是否平局</td>\n<td>供judge_win调用</td>\n</tr>\n<tr>\n<td>judge_win</td>\n<td>Arr:棋局地图</td>\n<td>Int:哪方赢(0,1,2,-1)</td>\n<td>判断局面情况</td>\n</tr>\n<tr>\n<td>fill_zero</td>\n<td>Arr:棋局地图</td>\n<td>NaN</td>\n<td>游戏结束将地图填充0</td>\n</tr>\n<tr>\n<td>computer_move</td>\n<td>Arr:棋局地图</td>\n<td>NaN</td>\n<td>AI落子</td>\n</tr>\n<tr>\n<td>process_res</td>\n<td>NaN</td>\n<td>NaN</td>\n<td>游戏结束后的处理，是否继续</td>\n</tr>\n<tr>\n<td>evaluate</td>\n<td>Arr:棋局地图</td>\n<td>Int:权重</td>\n<td>估值函数，里面要调用学习到的模型来输出权重</td>\n</tr>\n</tbody></table>\n<p><strong>展望：</strong></p>\n<p>关于AI状态机的设定。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><p><a href=\"https://studygolang.com/articles/6466\" target=\"_blank\" rel=\"noopener\">AlphaGo论文的译文</a></p>\n</li>\n<li><p><a href=\"https://www.researchgate.net/publication/292074166_Mastering_the_game_of_Go_with_deep_neural_networks_and_tree_search\" target=\"_blank\" rel=\"noopener\">Mastering the game of Go with deep neural networks and tree search</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/livingsu/article/details/104536005\" target=\"_blank\" rel=\"noopener\">五子棋ai：极大极小搜索和α-β剪枝算法的思想和实现(qt和c++)</a></p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV1a7411K7g1\" target=\"_blank\" rel=\"noopener\">Alpha-Beta剪枝算法(极大极小算法-人工智能)</a></p>\n</li>\n<li><p><a href=\"https://eyehere.net/2011/python-pygame-novice-professional-index/\" target=\"_blank\" rel=\"noopener\">用Python和Pygame写游戏-从入门到精通</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/78677068\" target=\"_blank\" rel=\"noopener\">井字棋真的有必胜方法吗？</a></p>\n</li>\n<li><p><a href=\"https://www.zhihu.com/question/41323126/answer/382320588\" target=\"_blank\" rel=\"noopener\">有谁照着论文把 AlphaGo 重现出来了？</a></p>\n</li>\n</ol>\n","more":"<h2 id=\"论文摘要\"><a href=\"#论文摘要\" class=\"headerlink\" title=\"论文摘要\"></a>论文摘要</h2><ol>\n<li><p>这个方法使用估值神经网络来评估棋局，以及使用策略网络来选择如何落子。这些深度神经网络被一种新的组合来训练：使用了人类专业比赛数据的监督学习，以及自我对弈的强化学习。</p>\n</li>\n<li><p>在状态 s 时对搜索树进行剪枝，然后用一个近似估值函数v(s)≈v∗(s)取代状态 s 下面的子树，这个近似估值函数预测状态 s 之后的对弈结果。</p>\n</li>\n<li><p>搜索的宽度可以通过来自策略p(a|s)的样品动作来降低，这个策略是一个在位置 s 的可能下棋走子 a 概率分布。</p>\n</li>\n<li><p>蒙特卡洛树搜索使用蒙特卡洛走子方法，评估搜索树中每一个状态的估值。随着执行越来越多的模拟，这个搜索树成长越来越大，而且相关估值愈发精确。</p>\n</li>\n<li><p>然而，先前的工作已经受到了基于输入的线性组合的肤浅的策略或估值函数的限制。</p>\n</li>\n<li><p>它们使用很多层的神经网络，每一个安排在重叠的瓦片，用来构建愈发抽象的，局部代表的图片，我们为围棋程序部署了类似的体系架构。我们给程序传入了一个 19*19 大小棋局的图片，然后使用卷积神经网络来构建一个位置的代表。我们使用这些神经网络来降低搜索树的有效的深度和广度：通过估值网络来评估棋局，和使用策略网络来博弈取样。</p>\n</li>\n<li><p>我们的AlphaGo程序有效地把策略网络、估值网络，和蒙特卡洛搜索树结合在一起。</p>\n</li>\n<li><p>如果赢棋，结果等于 +1，如果输棋，结果等于 -1。然后权重在每一个步骤 t 更新：朝向最大化预期结果的方向随机梯度递增。</p>\n</li>\n<li><p>我们想出了新的自我对弈的数据集合，包含了三千万个不同的棋局，每一个都是从不同盘博弈中采样。每一盘博弈都是在 RL 策略网络和自己之间对弈，直到博弈本身结束。</p>\n</li>\n<li><p>AlphaGo 在把策略网络、估值网络和 MCTS 算法结合，MCTS 通过预测搜索选择下棋动作。</p>\n</li>\n<li><p>基于高性能蒙特卡洛树搜索算法的、蒙特卡洛树搜索</p>\n</li>\n<li><p>基于一个深度神经网络和树搜索的结合开发了一个围棋程序。我们首次，对围棋开发了一个有效地下棋走子选择器和棋局评估函数，它是基于被一个创新型地监督学习和强化学习地组合训练的深度网络。我们引入了新的搜索算法，它成功的把神经网络评估和蒙特卡洛滚动走子结合在一起。我们的程序 AlphaGo 把这些组成部分按照比例集成在一起，成为了一个高性能的树搜索引擎。</p>\n</li>\n<li><p>一个有挑战性的决策任务；一个难以对付的解空间；和一个非常复杂的最优解，以至于它看上去不可能世界使用策略或者估值函数逼近。</p>\n</li>\n<li><p>通过把树搜索和策略估值网络结合在一起，AlphaGo最终达到了围棋职业选手的水平。</p>\n</li>\n</ol>\n<h2 id=\"AlphaGo应用——五子棋\"><a href=\"#AlphaGo应用——五子棋\" class=\"headerlink\" title=\"AlphaGo应用——五子棋\"></a>AlphaGo应用——五子棋</h2><h3 id=\"评估函数\"><a href=\"#评估函数\" class=\"headerlink\" title=\"评估函数\"></a>评估函数</h3><ol>\n<li><p><strong>是对一个可走的空位子进行打分</strong>，如果ai白子落在这个空位置的分数越高，说明这个位置就越好，每次ai走棋就找到一个最好的空位置就行了。</p>\n</li>\n<li><p><strong>是对现在的棋盘局面进行打分</strong>。 ai白子首先找所有可以走的空位置，模拟走了这个位置以后，用f函数进行局面评分，如果走了这样的一个空位置的得分越高，说明这个位置就越好，每次ai走棋就找这样一个分数最高的位置。</p>\n</li>\n</ol>\n<p>如果你只是想实现一个只看一步的ai，那么你可以用第一个函数也可以用第二个函数。但是如果你想要实现基于博弈树的极大极小搜索和α-β剪枝算法的”聪明”ai，就只能用第二个函数，因为<strong>博弈树必须要对局面打分，而不是对位置打分</strong>。</p>\n<h3 id=\"棋型权重设计\"><a href=\"#棋型权重设计\" class=\"headerlink\" title=\"棋型权重设计\"></a>棋型权重设计</h3><table>\n<thead>\n<tr>\n<th>棋型代号</th>\n<th>棋型说明</th>\n<th>权重</th>\n<th>棋型代号</th>\n<th>棋型说明</th>\n<th><strong>权重</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WIN</td>\n<td>白赢</td>\n<td>1000000</td>\n<td>LOSE</td>\n<td>黑赢</td>\n<td>-10000000</td>\n</tr>\n<tr>\n<td>FLEX4</td>\n<td>白活4</td>\n<td>50000</td>\n<td>flex4</td>\n<td>黑活4</td>\n<td>-100000</td>\n</tr>\n<tr>\n<td>BLOCK4</td>\n<td>白冲4</td>\n<td>400</td>\n<td>block4</td>\n<td>黑冲4</td>\n<td>-100000</td>\n</tr>\n<tr>\n<td>FLEX3</td>\n<td>白活3</td>\n<td>400</td>\n<td>flex3</td>\n<td>黑活3</td>\n<td>-8000</td>\n</tr>\n<tr>\n<td>BLOCK3</td>\n<td>白眠3</td>\n<td>20</td>\n<td>block3</td>\n<td>黑眠3</td>\n<td>-50</td>\n</tr>\n<tr>\n<td>FLEX2</td>\n<td>白活2</td>\n<td>20</td>\n<td>flex2</td>\n<td>黑活2</td>\n<td>-50</td>\n</tr>\n<tr>\n<td>BLOCK2</td>\n<td>白眠2</td>\n<td>1</td>\n<td>block2</td>\n<td>黑眠2</td>\n<td>-3</td>\n</tr>\n<tr>\n<td>FLEX1</td>\n<td>白活1</td>\n<td>1</td>\n<td>flex1</td>\n<td>黑活1</td>\n<td>-3</td>\n</tr>\n</tbody></table>\n<p>权重设计表格</p>\n<h3 id=\"极大极小搜索\"><a href=\"#极大极小搜索\" class=\"headerlink\" title=\"极大极小搜索\"></a>极大极小搜索</h3><p>在博弈树中，当ai走棋时选择对自己最有利的位置节点走，而当玩家走棋时，是ai模拟玩家选择对玩家最有利的位置节点走。由于评估函数F对局势的评分是对于ai白子来说的，所以ai走棋时选择F最大的节点，模拟玩家走棋时选择F最小的节点（F越小，对ai越不利，对玩家越有利，ai模拟玩家时是认为玩家是”聪明”的），这就是称为极大极小搜索的缘故。</p>\n<h3 id=\"α-β剪枝算法\"><a href=\"#α-β剪枝算法\" class=\"headerlink\" title=\"α-β剪枝算法\"></a>α-β剪枝算法</h3><p>α-β剪枝算法中每一个节点对应有一个α和一个β，α表示目前该节点的最好下界，β表示目前该节点的最好上界。在最开始时，α为负无穷，β为正无穷。然后进行搜索，max层节点每搜索它的一个子节点，就要更新自己的α（下界），而min层节点每搜索它的一个子节点，就要更新自己的β（上界）。如果更新之后发现α&gt;=β了，说明后面的子节点已经不需要进行搜索了，直接break剪枝掉。这就是α-β剪枝算法的全部含义。</p>\n<h3 id=\"局部搜索和静态评价启发\"><a href=\"#局部搜索和静态评价启发\" class=\"headerlink\" title=\"局部搜索和静态评价启发\"></a>局部搜索和静态评价启发</h3><p>a)  局部搜索是说，只考虑那些能和棋子产生关系的空位置，而不用考虑所有空位置，这样能极大减小b的值。</p>\n<p>b)  静态评价启发是对于α-β剪枝算法而言的，意思是说，如果越早搜索到较优走法，剪枝就会越早发生。如果对可走节点的评估分数进行简单排序，就可以提高剪枝速度。</p>\n<h2 id=\"Bingo-AI的实现\"><a href=\"#Bingo-AI的实现\" class=\"headerlink\" title=\"Bingo AI的实现\"></a>Bingo AI的实现</h2><h3 id=\"游戏规则\"><a href=\"#游戏规则\" class=\"headerlink\" title=\"游戏规则\"></a>游戏规则</h3><p>游戏双方分别在3x3的方格纸上依次画x或o，直到一方的x或o连成一条直线（3个子）获胜。</p>\n<p><img src=\"https://qiniu.madeai.cn/blogimg/image-20201120172338713.png?imgslim\" alt=\"image-20201120172338713\"></p>\n<p>平局示意图</p>\n<h3 id=\"系统架构设计\"><a href=\"#系统架构设计\" class=\"headerlink\" title=\"系统架构设计\"></a>系统架构设计</h3><h4 id=\"Pygame\"><a href=\"#Pygame\" class=\"headerlink\" title=\"Pygame\"></a>Pygame</h4><blockquote>\n<p>Pygame is a set of Python modules designed for writing video games. Pygame adds functionality on top of the excellent SDL library. This allows you to create fully featured games and multimedia programs in the python language.</p>\n</blockquote>\n<h4 id=\"TensorFlow\"><a href=\"#TensorFlow\" class=\"headerlink\" title=\"TensorFlow\"></a>TensorFlow</h4><blockquote>\n<p>TensorFlow 是一个端到端开源机器学习平台。它拥有一个全面而灵活的生态系统，其中包含各种工具、库和社区资源，可助力研究人员推动先进机器学习技术的发展，并使开发者能够轻松地构建和部署由机器学习提供支持的应用。</p>\n</blockquote>\n<h3 id=\"编码阶段\"><a href=\"#编码阶段\" class=\"headerlink\" title=\"编码阶段\"></a>编码阶段</h3><p><img src=\"https://qiniu.madeai.cn/blogimg/image-20201120172538668.png?imgslim\" alt=\"image-20201120172538668\"></p>\n<p>界面设计图示</p>\n<p>在规则设定上，默认玩家先手AI后手。玩家用”X”表示，AI用”O”表示。</p>\n<p><img src=\"https://qiniu.madeai.cn/blogimg/clip_image001.png?imgslim\" alt=\"img\"></p>\n<p>博弈树的设计图示</p>\n<p>在上图中，树的深度是9，因为最坏情况下要走9步。每个节点记录落子的方位和权值信息。由于是玩家先手，所以第一层的节点存储玩家的信息，由于AI的胜率要尽可能大，所以估值函数返回的值当中一定要是最小的才行；下一层是AI执棋，所以估值函数的返回值要选择大的。</p>\n<p><img src=\"https://qiniu.madeai.cn/blogimg/image-20201121180223198.png?imgslim\" alt=\"image-20201121180223198\"></p>\n<p>AI必输局面</p>\n<p>由以上局面和一般经验总结，占据最中间的位置赢面最大，所以可以设置在arr[1][1]时的初始权重最大；其次是边角位置，由于可以分别向两个方向落3个子，所以它的初始权重次之。边缘的位置不好判断，要结合具体的局面来设置权重。我们把所有的局面输入神经网络，通过神经网络的BP机制来动态调整权重。</p>\n<p><strong>AI自学习：</strong></p>\n<div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"video\":{\"url\":\"http://pan.madeai.cn/?/video/p1.mp4\",\"pic\":\"/assets/img/dplayer-cover.svg\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n\n<p>监督学习演示视频</p>\n<p>如以上视频所示，一开始我们和AI下棋，AI通过随机函数来随机生成落子方位。随着棋局的增加，AI将局面数组、赢方、权重的信息记录进一个json文件，根据玩家赢得次数来设计每个局面的权重。然后进入神经网络学习，通过BP来调整权重，通过α-β剪枝来降低搜索时间复杂度。随着我们和AI对弈次数的增加，AI会变得越来越有赢面，最后不再使用随机函数。</p>\n<p><strong>参数设计：</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Arr</td>\n<td>Int[][]</td>\n<td>游戏地图，0是空，1是玩家子，2是AI子</td>\n</tr>\n<tr>\n<td>Hold</td>\n<td>Int</td>\n<td>谁落子，1是玩家落子，2是AI落子</td>\n</tr>\n</tbody></table>\n<p><strong>函数设计：</strong></p>\n<table>\n<thead>\n<tr>\n<th>函数名称</th>\n<th>参数</th>\n<th>返回值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>judge_full</td>\n<td>Arr:棋局地图</td>\n<td>Bool:是否平局</td>\n<td>供judge_win调用</td>\n</tr>\n<tr>\n<td>judge_win</td>\n<td>Arr:棋局地图</td>\n<td>Int:哪方赢(0,1,2,-1)</td>\n<td>判断局面情况</td>\n</tr>\n<tr>\n<td>fill_zero</td>\n<td>Arr:棋局地图</td>\n<td>NaN</td>\n<td>游戏结束将地图填充0</td>\n</tr>\n<tr>\n<td>computer_move</td>\n<td>Arr:棋局地图</td>\n<td>NaN</td>\n<td>AI落子</td>\n</tr>\n<tr>\n<td>process_res</td>\n<td>NaN</td>\n<td>NaN</td>\n<td>游戏结束后的处理，是否继续</td>\n</tr>\n<tr>\n<td>evaluate</td>\n<td>Arr:棋局地图</td>\n<td>Int:权重</td>\n<td>估值函数，里面要调用学习到的模型来输出权重</td>\n</tr>\n</tbody></table>\n<p><strong>展望：</strong></p>\n<p>关于AI状态机的设定。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><p><a href=\"https://studygolang.com/articles/6466\" target=\"_blank\" rel=\"noopener\">AlphaGo论文的译文</a></p>\n</li>\n<li><p><a href=\"https://www.researchgate.net/publication/292074166_Mastering_the_game_of_Go_with_deep_neural_networks_and_tree_search\" target=\"_blank\" rel=\"noopener\">Mastering the game of Go with deep neural networks and tree search</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/livingsu/article/details/104536005\" target=\"_blank\" rel=\"noopener\">五子棋ai：极大极小搜索和α-β剪枝算法的思想和实现(qt和c++)</a></p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/video/BV1a7411K7g1\" target=\"_blank\" rel=\"noopener\">Alpha-Beta剪枝算法(极大极小算法-人工智能)</a></p>\n</li>\n<li><p><a href=\"https://eyehere.net/2011/python-pygame-novice-professional-index/\" target=\"_blank\" rel=\"noopener\">用Python和Pygame写游戏-从入门到精通</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/78677068\" target=\"_blank\" rel=\"noopener\">井字棋真的有必胜方法吗？</a></p>\n</li>\n<li><p><a href=\"https://www.zhihu.com/question/41323126/answer/382320588\" target=\"_blank\" rel=\"noopener\">有谁照着论文把 AlphaGo 重现出来了？</a></p>\n</li>\n</ol>\n","categories":[],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"paper","path":"api/tags/paper.json"},{"name":"reading-book","path":"api/tags/reading-book.json"},{"name":"think","path":"api/tags/think.json"}]}