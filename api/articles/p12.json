{"title":"ajax异步加载","slug":"p12","date":"2018-06-02T09:17:18.000Z","updated":"2020-08-31T21:47:36.135Z","comments":true,"path":"api/articles/p12.json","excerpt":null,"covers":["/assets/blogimg/p12-1.png"],"content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><img src=\"/assets/blogimg/p12-1.png\" alt=\"p12-1\" title=\"p12-1\"></p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><pre><code>ajax即Asynchronous Javascript And XML,异步javascript和XML;json即JavaScript Object Notation,javascript对象标记.</code></pre>\n<h3 id=\"使用原生js创建XMLHttpRequest对象\"><a href=\"#使用原生js创建XMLHttpRequest对象\" class=\"headerlink\" title=\"使用原生js创建XMLHttpRequest对象\"></a>使用原生js创建XMLHttpRequest对象</h3><pre><code class=\"javascript\">var xhr = new XMLHttpRequest;\nxhr.open(&quot;GET&quot;, &quot;https://blog.madeai.cn/api&quot;);\nxhr.onload = function () {\n    var data = JSON.parse(xhr.responseText);\n    doSomething(data);\n}\nxhr.send();</code></pre>\n<ol>\n<li>其中<code>xhr.open();</code>有3个传入参数,第一个是数据传输的方式,最常用的就是<code>post</code>,<code>get</code>,<code>put</code>,<code>delect</code>了.第二个是后端的URL,值得注意的是如果是<strong>跨域</strong>的话,需要在后端PHP代码前添加<code>header(&quot;Access-Control-Allow-Origin: *&quot;);</code>,或者用代理.<br>第三参数是Boolean型的可选项,表示是否异步加载;</li>\n<li><code>xhr.onload();</code>是在数据加载完成后要处理的事情;也可以用<code>xhr.onreadystatechange=doSomething;</code>.<blockquote>\n<p>onreadystatechange 是一个事件句柄。它的值 (state_Change) 是一个函数的名称，当 XMLHttpRequest 对象的状态发生改变时，会触发此函数。状态从 0 (uninitialized) 到 4 (complete) 进行变化。仅在状态为 4 时，我们才执行代码。</p>\n</blockquote>\n</li>\n<li>最后一个<code>xhr.send();</code>就是将请求发送到服务器端了;</li>\n</ol>\n<h3 id=\"使用jquery封装的-ajax-和-getJSON-函数\"><a href=\"#使用jquery封装的-ajax-和-getJSON-函数\" class=\"headerlink\" title=\"使用jquery封装的$ajax()和$getJSON()函数\"></a>使用jquery封装的$ajax()和$getJSON()函数</h3><ul>\n<li>$ajax比较灵活哦,异步加载任何格式的数据;<pre><code class=\"javascript\">$.ajax({\n  type: &quot;POST&quot;,//像登陆一样的比较重要的数据要用post,放进请求体里哦;\n  url: &quot;http://madeai.cn/api&quot;,\n  dataType: &quot;json&quot;,\n  data: {\n      username:444,\n      password:6666//用md5签名,数据传输更安全;\n  },\n  success: function (obj) {\n      doSomething(obj);\n  },\n  error: function(XMLHttpRequest, textStatus, errorThrown) {\n      console.log(XMLHttpRequest.status,XMLHttpRequest.status,textStatus);\n  },</code></pre>\n</li>\n<li>用$getJSON()来获取json数据;<pre><code class=\"javascript\">$.getJSON(&quot;http://madeai.cn/api&quot;, &quot;&quot;, function (data) {\n  $.each(data[&quot;result&quot;].tracks, function (i, item) {//each循环 使用$.each方法遍历返回的数据data\n  /*doSomething;\n   *function();中第一个参数是数组的索引index,第二个是原数组对象;\n   */\n  });\n});</code></pre>\n</li>\n</ul>\n<p>jquery还封装了类似<code>$get()</code>,<code>$.post()</code>的函数;</p>\n<hr>\n<p>demo click <a href=\"https://huangyebiaoke.github.io/item/example/ajax&json.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n","more":"<p><img src=\"/assets/blogimg/p12-1.png\" alt=\"p12-1\" title=\"p12-1\"></p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><pre><code>ajax即Asynchronous Javascript And XML,异步javascript和XML;json即JavaScript Object Notation,javascript对象标记.</code></pre>\n<h3 id=\"使用原生js创建XMLHttpRequest对象\"><a href=\"#使用原生js创建XMLHttpRequest对象\" class=\"headerlink\" title=\"使用原生js创建XMLHttpRequest对象\"></a>使用原生js创建XMLHttpRequest对象</h3><pre><code class=\"javascript\">var xhr = new XMLHttpRequest;\nxhr.open(&quot;GET&quot;, &quot;https://blog.madeai.cn/api&quot;);\nxhr.onload = function () {\n    var data = JSON.parse(xhr.responseText);\n    doSomething(data);\n}\nxhr.send();</code></pre>\n<ol>\n<li>其中<code>xhr.open();</code>有3个传入参数,第一个是数据传输的方式,最常用的就是<code>post</code>,<code>get</code>,<code>put</code>,<code>delect</code>了.第二个是后端的URL,值得注意的是如果是<strong>跨域</strong>的话,需要在后端PHP代码前添加<code>header(&quot;Access-Control-Allow-Origin: *&quot;);</code>,或者用代理.<br>第三参数是Boolean型的可选项,表示是否异步加载;</li>\n<li><code>xhr.onload();</code>是在数据加载完成后要处理的事情;也可以用<code>xhr.onreadystatechange=doSomething;</code>.<blockquote>\n<p>onreadystatechange 是一个事件句柄。它的值 (state_Change) 是一个函数的名称，当 XMLHttpRequest 对象的状态发生改变时，会触发此函数。状态从 0 (uninitialized) 到 4 (complete) 进行变化。仅在状态为 4 时，我们才执行代码。</p>\n</blockquote>\n</li>\n<li>最后一个<code>xhr.send();</code>就是将请求发送到服务器端了;</li>\n</ol>\n<h3 id=\"使用jquery封装的-ajax-和-getJSON-函数\"><a href=\"#使用jquery封装的-ajax-和-getJSON-函数\" class=\"headerlink\" title=\"使用jquery封装的$ajax()和$getJSON()函数\"></a>使用jquery封装的$ajax()和$getJSON()函数</h3><ul>\n<li>$ajax比较灵活哦,异步加载任何格式的数据;<pre><code class=\"javascript\">$.ajax({\n  type: &quot;POST&quot;,//像登陆一样的比较重要的数据要用post,放进请求体里哦;\n  url: &quot;http://madeai.cn/api&quot;,\n  dataType: &quot;json&quot;,\n  data: {\n      username:444,\n      password:6666//用md5签名,数据传输更安全;\n  },\n  success: function (obj) {\n      doSomething(obj);\n  },\n  error: function(XMLHttpRequest, textStatus, errorThrown) {\n      console.log(XMLHttpRequest.status,XMLHttpRequest.status,textStatus);\n  },</code></pre>\n</li>\n<li>用$getJSON()来获取json数据;<pre><code class=\"javascript\">$.getJSON(&quot;http://madeai.cn/api&quot;, &quot;&quot;, function (data) {\n  $.each(data[&quot;result&quot;].tracks, function (i, item) {//each循环 使用$.each方法遍历返回的数据data\n  /*doSomething;\n   *function();中第一个参数是数组的索引index,第二个是原数组对象;\n   */\n  });\n});</code></pre>\n</li>\n</ul>\n<p>jquery还封装了类似<code>$get()</code>,<code>$.post()</code>的函数;</p>\n<hr>\n<p>demo click <a href=\"https://huangyebiaoke.github.io/item/example/ajax&json.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n","categories":[],"tags":[{"name":"JS","path":"api/tags/JS.json"},{"name":"AJAX","path":"api/tags/AJAX.json"},{"name":"JSON","path":"api/tags/JSON.json"}]}